#include "Pcheader.h"

#include <tpublic/Helpers.h>
#include <tpublic/Perlin.h>

// Based on Ken Perlin's reference implementation: https://mrl.cs.nyu.edu/~perlin/noise/INoise.java

namespace tpublic
{

	namespace
	{
		static Perlin::Seed g_perlinPermutations =
		{
			0x97, 0xa0, 0x89, 0x5b, 0x5a, 0x0f, 0x83, 0x0d, 0xc9, 0x5f, 0x60, 0x35, 0xc2, 0xe9, 0x07, 0xe1,
			0x8c, 0x24, 0x67, 0x1e, 0x45, 0x8e, 0x08, 0x63, 0x25, 0xf0, 0x15, 0x0a, 0x17, 0xbe, 0x06, 0x94,
			0xf7, 0x78, 0xea, 0x4b, 0x00, 0x1a, 0xc5, 0x3e, 0x5e, 0xfc, 0xdb, 0xcb, 0x75, 0x23, 0x0b, 0x20,
			0x39, 0xb1, 0x21, 0x58, 0xed, 0x95, 0x38, 0x57, 0xae, 0x14, 0x7d, 0x88, 0xab, 0xa8, 0x44, 0xaf,
			0x4a, 0xa5, 0x47, 0x86, 0x8b, 0x30, 0x1b, 0xa6, 0x4d, 0x92, 0x9e, 0xe7, 0x53, 0x6f, 0xe5, 0x7a,
			0x3c, 0xd3, 0x85, 0xe6, 0xdc, 0x69, 0x5c, 0x29, 0x37, 0x2e, 0xf5, 0x28, 0xf4, 0x66, 0x8f, 0x36,
			0x41, 0x19, 0x3f, 0xa1, 0x01, 0xd8, 0x50, 0x49, 0xd1, 0x4c, 0x84, 0xbb, 0xd0, 0x59, 0x12, 0xa9,
			0xc8, 0xc4, 0x87, 0x82, 0x74, 0xbc, 0x9f, 0x56, 0xa4, 0x64, 0x6d, 0xc6, 0xad, 0xba, 0x03, 0x40,
			0x34, 0xd9, 0xe2, 0xfa, 0x7c, 0x7b, 0x05, 0xca, 0x26, 0x93, 0x76, 0x7e, 0xff, 0x52, 0x55, 0xd4,
			0xcf, 0xce, 0x3b, 0xe3, 0x2f, 0x10, 0x3a, 0x11, 0xb6, 0xbd, 0x1c, 0x2a, 0xdf, 0xb7, 0xaa, 0xd5,
			0x77, 0xf8, 0x98, 0x02, 0x2c, 0x9a, 0xa3, 0x46, 0xdd, 0x99, 0x65, 0x9b, 0xa7, 0x2b, 0xac, 0x09,
			0x81, 0x16, 0x27, 0xfd, 0x13, 0x62, 0x6c, 0x6e, 0x4f, 0x71, 0xe0, 0xe8, 0xb2, 0xb9, 0x70, 0x68,
			0xda, 0xf6, 0x61, 0xe4, 0xfb, 0x22, 0xf2, 0xc1, 0xee, 0xd2, 0x90, 0x0c, 0xbf, 0xb3, 0xa2, 0xf1,
			0x51, 0x33, 0x91, 0xeb, 0xf9, 0x0e, 0xef, 0x6b, 0x31, 0xc0, 0xd6, 0x1f, 0xb5, 0xc7, 0x6a, 0x9d,
			0xb8, 0x54, 0xcc, 0xb0, 0x73, 0x79, 0x32, 0x2d, 0x7f, 0x04, 0x96, 0xfe, 0x8a, 0xec, 0xcd, 0x5d,
			0xde, 0x72, 0x43, 0x1d, 0x18, 0x48, 0xf3, 0x8d, 0x80, 0xc3, 0x4e, 0x42, 0xd7, 0x3d, 0x9c, 0xb4,
			0x97, 0xa0, 0x89, 0x5b, 0x5a, 0x0f, 0x83, 0x0d, 0xc9, 0x5f, 0x60, 0x35, 0xc2, 0xe9, 0x07, 0xe1,
			0x8c, 0x24, 0x67, 0x1e, 0x45, 0x8e, 0x08, 0x63, 0x25, 0xf0, 0x15, 0x0a, 0x17, 0xbe, 0x06, 0x94,
			0xf7, 0x78, 0xea, 0x4b, 0x00, 0x1a, 0xc5, 0x3e, 0x5e, 0xfc, 0xdb, 0xcb, 0x75, 0x23, 0x0b, 0x20,
			0x39, 0xb1, 0x21, 0x58, 0xed, 0x95, 0x38, 0x57, 0xae, 0x14, 0x7d, 0x88, 0xab, 0xa8, 0x44, 0xaf,
			0x4a, 0xa5, 0x47, 0x86, 0x8b, 0x30, 0x1b, 0xa6, 0x4d, 0x92, 0x9e, 0xe7, 0x53, 0x6f, 0xe5, 0x7a,
			0x3c, 0xd3, 0x85, 0xe6, 0xdc, 0x69, 0x5c, 0x29, 0x37, 0x2e, 0xf5, 0x28, 0xf4, 0x66, 0x8f, 0x36,
			0x41, 0x19, 0x3f, 0xa1, 0x01, 0xd8, 0x50, 0x49, 0xd1, 0x4c, 0x84, 0xbb, 0xd0, 0x59, 0x12, 0xa9,
			0xc8, 0xc4, 0x87, 0x82, 0x74, 0xbc, 0x9f, 0x56, 0xa4, 0x64, 0x6d, 0xc6, 0xad, 0xba, 0x03, 0x40,
			0x34, 0xd9, 0xe2, 0xfa, 0x7c, 0x7b, 0x05, 0xca, 0x26, 0x93, 0x76, 0x7e, 0xff, 0x52, 0x55, 0xd4,
			0xcf, 0xce, 0x3b, 0xe3, 0x2f, 0x10, 0x3a, 0x11, 0xb6, 0xbd, 0x1c, 0x2a, 0xdf, 0xb7, 0xaa, 0xd5,
			0x77, 0xf8, 0x98, 0x02, 0x2c, 0x9a, 0xa3, 0x46, 0xdd, 0x99, 0x65, 0x9b, 0xa7, 0x2b, 0xac, 0x09,
			0x81, 0x16, 0x27, 0xfd, 0x13, 0x62, 0x6c, 0x6e, 0x4f, 0x71, 0xe0, 0xe8, 0xb2, 0xb9, 0x70, 0x68,
			0xda, 0xf6, 0x61, 0xe4, 0xfb, 0x22, 0xf2, 0xc1, 0xee, 0xd2, 0x90, 0x0c, 0xbf, 0xb3, 0xa2, 0xf1,
			0x51, 0x33, 0x91, 0xeb, 0xf9, 0x0e, 0xef, 0x6b, 0x31, 0xc0, 0xd6, 0x1f, 0xb5, 0xc7, 0x6a, 0x9d,
			0xb8, 0x54, 0xcc, 0xb0, 0x73, 0x79, 0x32, 0x2d, 0x7f, 0x04, 0x96, 0xfe, 0x8a, 0xec, 0xcd, 0x5d,
			0xde, 0x72, 0x43, 0x1d, 0x18, 0x48, 0xf3, 0x8d, 0x80, 0xc3, 0x4e, 0x42, 0xd7, 0x3d, 0x9c, 0xb4, 
		};

		static const int32_t g_perlinFade[] =
		{
			0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 6, 7, 9, 10, 12, 14, 17, 19, 22, 25, 29, 32, 36, 40, 
			45, 49, 54, 60, 65, 71, 77, 84, 91, 98, 105, 113, 121, 130, 139, 148, 158, 167, 178, 188, 199, 
			211, 222, 234, 247, 259, 273, 286, 300, 314, 329, 344, 359, 374, 390, 407, 424, 441, 458, 476, 
			494, 512, 531, 550, 570, 589, 609, 630, 651, 672, 693, 715, 737, 759, 782, 805, 828, 851, 875, 
			899, 923, 948, 973, 998, 1023, 1049, 1074, 1100, 1127, 1153, 1180, 1207, 1234, 1261, 1289, 1316, 
			1344, 1372, 1400, 1429, 1457, 1486, 1515, 1543, 1572, 1602, 1631, 1660, 1690, 1719, 1749, 1778, 
			1808, 1838, 1868, 1898, 1928, 1958, 1988, 2018, 2048, 2077, 2107, 2137, 2167, 2197, 2227, 2257, 
			2287, 2317, 2346, 2376, 2405, 2435, 2464, 2493, 2523, 2552, 2580, 2609, 2638, 2666, 2695, 2723, 
			2751, 2779, 2806, 2834, 2861, 2888, 2915, 2942, 2968, 2995, 3021, 3046, 3072, 3097, 3122, 3147, 
			3172, 3196, 3220, 3244, 3267, 3290, 3313, 3336, 3358, 3380, 3402, 3423, 3444, 3465, 3486, 3506, 
			3525, 3545, 3564, 3583, 3601, 3619, 3637, 3654, 3672, 3688, 3705, 3721, 3736, 3751, 3766, 3781,
			3795, 3809, 3822, 3836, 3848, 3861, 3873, 3884, 3896, 3907, 3917, 3928, 3937, 3947, 3956, 3965, 
			3974, 3982, 3990, 3997, 4004, 4011, 4018, 4024, 4030, 4035, 4041, 4046, 4050, 4055, 4059, 4063, 
			4066, 4070, 4073, 4076, 4078, 4081, 4083, 4085, 4086, 4088, 4089, 4091, 4092, 4092, 4093, 4094, 
			4094, 4095, 4095, 4095, 4095, 4095, 4095, 4095
		};

		int32_t
		_Fade(
			int32_t		aValue) 
		{
			int32_t t0 = g_perlinFade[aValue >> 8];
			int32_t t1 = g_perlinFade[Base::Min<int32_t>(255, (aValue >> 8) + 1)];
			return t0 + ((aValue & 255) * (t1 - t0) >> 8);
		}

		int32_t
		_Lerp(
			int32_t		aValue,
			int32_t		a1,
			int32_t		a2)
		{
			return a1 + (aValue * (a2 - a1) >> 12);
		}

		int32_t
		_Grad(
			int32_t		aHash,
			int32_t		aX,
			int32_t		aY,
			int32_t		aZ)
		{
			int32_t h = aHash & 15;
			int32_t u = h < 8 ? aX : aY;
			int32_t v = h < 4 ? aY : h == 12 || h == 14 ? aX : aZ;
			return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
		}

	}

	namespace Perlin
	{

		void			
		InitSeed(
			Seed*			aSeed,
			std::mt19937&	aRandom)
		{
			// A seed is just all integers 0 to 255 in a random order (twice)
			std::vector<int32_t> values;
			for (int32_t i = 0; i < 256; i++)
				values.push_back(i);

			for(int32_t i = 0; i < 256; i++)
			{
				std::uniform_int_distribution<size_t> distribution(0, values.size() - 1);
				size_t j = distribution(aRandom);				
				int32_t value = values[j];
				Helpers::RemoveCyclicFromVector(values, j);

				aSeed->m_permutations[i] = value;
				aSeed->m_permutations[i + 256] = value;
			}

			assert(values.empty());
		}

		int32_t
		Sample(
			int32_t			aX,
			int32_t			aY,
			int32_t			aZ,
			const Seed*		aSeed)
		{
			const int32_t* p = aSeed != NULL ? aSeed->m_permutations : g_perlinPermutations.m_permutations;

			int32_t x = aX >> 16 & 255;
			int32_t y = aY >> 16 & 255;
			int32_t z = aZ >> 16 & 255;
			int32_t n = 1 << 16;
			aX &= n - 1;
			aY &= n - 1;
			aZ &= n - 1;
			int32_t v = _Fade(aY);
			int32_t u = _Fade(aX);
			int32_t w = _Fade(aZ);
			int32_t a = p[x] + y;
			int32_t aa = p[a] + z;
			int32_t ab = p[a + 1] + z;
			int32_t b = p[x + 1] + y;
			int32_t ba = p[b] + z;
			int32_t bb = p[b + 1] + z;

			return _Lerp(w, _Lerp(v, _Lerp(u, _Grad(p[aa], aX, aY, aZ),
				_Grad(p[ba], aX - n, aY, aZ)),
				_Lerp(u, _Grad(p[ab], aX, aY - n, aZ),
					_Grad(p[bb], aX - n, aY - n, aZ))),
				_Lerp(v, _Lerp(u, _Grad(p[aa + 1], aX, aY, aZ - n),
					_Grad(p[ba + 1], aX - n, aY, aZ - n)),
					_Lerp(u, _Grad(p[ab + 1], aX, aY - n, aZ - n),
						_Grad(p[bb + 1], aX - n, aY - n, aZ - n))));
		}

	}

}